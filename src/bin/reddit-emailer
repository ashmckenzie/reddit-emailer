#!/usr/bin/env ruby

require 'logger'
require 'clamp'
require File.expand_path(File.join('..', '..', 'config', 'initialise'), __FILE__)

include RedditEmailer

Clamp do
  option '--version', :flag, 'show version' do
    puts "toolbelt #{RedditEmailer::VERSION}"
    exit 0
  end

  option '--verbose', :flag, 'Enable verbose logging'
  option '--debug', :flag, 'Enable debug mode'
  option '--dry-run', :flag, "Enable dry-run (don't send email)"
  option '--title-filter-exclude', 'FILTER', 'Filter out unwanted images using their title'
  option '--subreddit', 'SUBREDDIT', 'Subreddit to trawl', required: true
  option '--subreddit-label', 'SUBREDDIT_LABEL', 'Subreddit label'
  option '--emails', 'EMAILS', 'Email addresses to send to'
  option([ '-m', '--maximum' ], 'MAXIUMUM', 'Maximum the number of images to display', default: 10) { |x| Integer(x) }

  def logger_level
    if $DEBUG
      Logger::DEBUG
    elsif $VERBOSE
      Logger::INFO
    else
      Logger::ERROR
    end
  end

  def setup_logger!
    $logger = Logger.new(STDOUT)
    $logger.level = logger_level
  end

  def emails
    signal_usage_error "option '--emails' is required" if !dry_run? && @emails.nil?
    (@emails || '').split(/,/)
  end

  def title_filter
    @title_filter ||= @title_filter_exclude ? @title_filter_exclude.split(/,/) : []
  end

  def validations
    Hashie::Mash.new(must_have_images: nil, title_filter: title_filter)
  end

  def subreddit
    Reddit::SubReddit.new(@subreddit, subreddit_label, maximum, validations)
  end

  def subreddit_label
    @subreddit_label || @subreddit
  end

  def preflight
    $DEBUG   = debug? ? true : false
    $VERBOSE = verbose? ? true : false

    setup_logger!
  end

  def execute
    preflight

    if dry_run?
      Presenters::Browser.new(subreddit).display!
    else
      begin
        Presenters::EmailMandrill.new(subreddit, emails).send!
      rescue => e
        Rollbar.log(e)
      end
    end
  end
end
