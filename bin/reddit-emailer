#!/usr/bin/env ruby

require 'logger'
require 'clamp'
require 'hashie'

require_relative '../config/initialise'

Clamp do
  option "--version", :flag, "show version" do
    puts "toolbelt #{RedditEmailer::VERSION}"
    exit 0
  end

  option '--verbose', :flag, 'Enable verbose logging'
  option '--debug', :flag, 'Enable debug mode'
  option '--dry-run', :flag, "Enable dry-run (don't send email)"
  option '--title-filter-exclude', 'FILTER', 'Filter out unwanted images using their title'
  option '--emails', 'EMAILS', 'Email addresses to send to'
  option '--subreddit', 'SUBREDDIT', 'Subreddit to trawl', required: true
  option([ '-m', '--maximum' ], 'MAXIUMUM', 'Maximum the number of images to display', default: 10) { |x| Integer(x) }

  def logger_level
    if $DEBUG
      Logger::DEBUG
    elsif $VERBOSE
      Logger::INFO
    else
      Logger::ERROR
    end
  end

  def setup_logger!
    $logger = Logger.new(STDOUT)
    $logger.level = logger_level
  end

  def emails
    signal_usage_error "option '--emails' is required" if !dry_run? && @emails.nil?
    (@emails || '').split(/,/)
  end

  def title_filter
    @title_filter ||= @title_filter_exclude.split(/,/)
  end

  def validations
    Hashie::Mash.new({
      must_have_images: nil,
      title_filter: title_filter
    })
  end

  def subreddit
    RedditEmailer::Reddit::SubReddit.new(@subreddit, maximum, validations)
  end

  def execute
    $DEBUG = !!debug?
    $VERBOSE = !!verbose?

    setup_logger!

    if dry_run?
      RedditEmailer::Presenters::Browser.new(subreddit).display!
    else
      RedditEmailer::Presenters::Email.new(subreddit, emails).send!
    end
  end
end
