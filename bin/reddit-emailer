#!/usr/bin/env ruby

require 'logger'
require 'clamp'
# require 'open-uri'
require 'hashie'

require_relative '../config/initialise'

include RedditEmailer

Clamp do
  option "--version", :flag, "show version" do
    puts "toolbelt #{RedditEmailer::VERSION}"
    exit 0
  end

  option '--verbose', :flag, 'Enable verbose logging'
  option '--debug', :flag, 'Enable debug mode'
  option '--dry-run', :flag, "Enable dry-run (don't send email)"
  option '--minimal-kitties', :flag, 'Minimal kitties, please.'
  option '--emails', 'EMAILS', 'Email addresses to send to'
  option '--subreddit', 'SUBREDDIT', 'Subreddit to trawl', required: true
  option([ '-m', '--maximum' ], 'MAXIUMUM', 'Maximum the number of images to display', default: 10) { |x| Integer(x) }

  def execute
    if dry_run?
      email_list = []
    else
      signal_usage_error "option '--emails' is required" if emails.nil?
      email_list = emails.split(/,/)
    end

    require 'pry' if debug?

    $logger = Logger.new(STDOUT)
    $logger.level = Logger::ERROR
    $logger.level = Logger::INFO if verbose?
    $logger.level = Logger::DEBUG if debug?

    options = Hashie::Mash.new({ debug: !!debug?, dry_run: !!dry_run? })
    filters = Hashie::Mash.new({ must_have_images: true, minimal_kitties: !minimal_kitties? })

    Errbit.endeavour(OpenURI::HTTPError) do |try|
      posts = Reddit::Posts.new(subreddit, maximum, options).fetch(filters)
      html = Reddit::Html.new(posts).generate

      if options.dry_run?
        Reddit::DumpHtml.new(html, subreddit, options).dump!
      else
        Reddit::Email.new(html, email_list, subreddit, options).send!
      end
    end
  end
end
